<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Element;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_page().
 */
function badcamp2017_preprocess_page(&$vars){
  $current_path = \Drupal::service('path.current')->getPath();
  $current_uri = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  $class_path = 'page-' . HTML::cleanCssIdentifier(trim($current_path , '/'));
  $class_url = 'page-' . HTML::cleanCssIdentifier(trim($current_uri, '/'));
  $vars['attributes']['class'] = array('layout--layoutPage', $class_url, $class_path);
}

/**
 * Implements template_preprocess_views_view_unformatted().
 */
function badcamp2017_preprocess_views_view_unformatted__badcamp_sponsors_view__page_1(&$vars){
  $vars['level_class'] = HTML::cleanCssIdentifier(strtolower(strip_tags($vars['title'])));

  switch($vars['level_class']){
    case 'core-level':
      foreach($vars['rows'] AS &$row){
        $row['attributes']->addClass('medium-6','columns','text-center');
      }
      break;
    case 'contrib-level':
    case 'supporting-level':
      foreach($vars['rows'] AS &$row){
        $row['attributes']->addClass('medium-3','columns','text-center');
      }
      break;

  }
}

/**
 * Implements hook_preprocess_field();
 */
function badcamp2017_preprocess_field__node__field_tags__blog(&$vars){
  $vars['attributes']['class'][] = 'button-group';

  foreach($vars['items'] AS &$item){
    $item['content']['#attributes']['class'][] = 'button';
  }
}

/**
 * Implements hook_node__node_type__view_mode().
 */
function badcamp2017_preprocess_node__venue__full(&$vars){
  $vars['map'] = $vars['content']['field_location'];
  $vars['image'] = $vars['content']['field_venue_image'];
  $vars['schedule'] = $vars['content']['venue_events_entity_view_1'];
  unset($vars['content']['field_location']);
  unset($vars['content']['field_venue_image']);
  unset($vars['content']['venue_events_entity_view_1']);

  $address = urlencode(str_ireplace("\r\n","",$vars['map'][0]['#locations'][0]['#content']));
  $lat = $vars['map'][0]['#locations'][0]['#position']['lat'];
  $lng = $vars['map'][0]['#locations'][0]['#position']['lng'];
  $url = Url::fromUri('https://www.google.com/maps/dir//' . $address.'/@'. $lat . ',' . $lng .',17z');
  $link = Link::fromTextAndUrl('Get Directions', $url)->toRenderable();
  $link['#attributes'] = [
    'target' => '_blank',
    'class' => 'success button'
  ];
  $vars['directionsLink'] = $link;
}

/**
 * Implements hook_node__node_type__view_mode().
 */
function badcamp2017_preprocess_node__session__teaser(&$vars){
  $vars['track'] = [
    'field_session_skill_level' => $vars['content']['field_session_skill_level'],
    'field_session_track' => $vars['content']['field_session_track']
  ];
  unset($vars['content']['field_session_skill_level']);
  unset($vars['content']['field_session_track']);
}

/**
 * Implements template_preprocess_node__node_type__node_display().
 */
function badcamp2017_preprocess_node__badcamp_sponsor__full(&$vars){
  $vars['sponsor_url'] = $vars['content']['field_link'][0]['#url']->getUri();
  unset($vars['content']['field_link']);
  $vars['logo'] = $vars['content']['field_sponsor_logo'];
  unset($vars['content']['field_sponsor_logo']);
  $vars['content'] = drupal_render_children($vars['content']);
}

/**
 * Implements template_preprocess_block__block_type().
 */
function badcamp2017_preprocess_block__homepageeventsataglancespecial(&$vars){
  $vars['block_count'] = sizeof(Element::children($vars['content']['field_blocks']));
  $titles = [];
  for($x = 0; $x < $vars['block_count']; $x++) {
    $titles[] = $vars['content']['field_blocks'][$x]['#block_content']->info->value;
  }
  $vars['titles'] = $titles;
  $vars['sectionClasses'] = [];
  $vars['context_links'] = [];
  for($x = 0; $x < $vars['block_count']; $x++){
    $class = '';
    switch($x%3){
      case 0:
        $class = 'blue-section';
        break;
      case 1:
        $class = 'green-section';
        break;
      case 2:
        $class = 'orange-section';
    }
    $vars['sectionClasses'][$x] = $class;
    $vars['context_links'][$x]['contextual_links'] = [
      '#type' => 'contextual_links_placeholder',
      '#id' => _contextual_links_to_id($vars['content']['field_blocks'][$x]['#contextual_links']),
    ];
  }
}

/**
 * Implements theme_menu_local_tasks().
 */
function badcamp2017_menu_local_tasks(&$variables) {
  $output = '';

  if (!empty($variables['primary'])) {
    $variables['primary']['#prefix'] = '<h2 class="visually-hidden">' . t('Primary tabs') . '</h2>';
    $variables['primary']['#prefix'] .= '<div class="button-group">';
    $variables['primary']['#suffix'] = '</div>';
    $output .= drupal_render($variables['primary']);
  }
  if (!empty($variables['secondary'])) {
    $variables['secondary']['#prefix'] = '<h2 class="visually-hidden">' . t('Secondary tabs') . '</h2>';
    $variables['secondary']['#prefix'] .= '<div class="button-group">';
    $variables['secondary']['#suffix'] = '</div>';
    $output .= drupal_render($variables['secondary']);
  }

  return $output;
}

/**
 * Implements theme_menu_local_task().
 */
function badcamp2017_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $link_text = array(
    '#markup' => $link['title'],
  );

  if (!empty($variables['element']['#active'])) {
    // Add text to indicate active tab for non-visual users.
    $link_text['#suffix'] = '<span class="visually-hidden">' . t('(active tab)') . '</span>';
  }

  $state = !empty($variables['element']['#active']) ? 'active' : 'secondary';
  $link['url']->setOption('attributes', array('class' => array('button', $state)));

  $a_tag = Link::fromTextAndUrl($link_text, $link['url'])->toString();

  return $a_tag;
}

/**
 * Implements theme_status_messages().
 */
function badcamp2017_status_messages($variables) {
  $display = $variables['message_list'];
  $output = '';

  $status_heading = array(
    'error' => t('Error message'),
    'status' => t('Status message'),
    'warning' => t('Warning message'),
  );

  $status_mapping = array(
    'error' => 'alert',
    'status' => 'success',
    'warning' => 'secondary'
  );

  foreach ($display as $type => $messages) {
    if (isset($status_mapping[$type])) {
      $output .= "<div class=\"zurb-foundation-callout callout $status_mapping[$type]\" data-closable=\"fade-out\">\n";
    }
    else {
      $output .= "<div class=\"zurb-foundation-callout callout\" data-closable=\"fade-out\">\n";
    }

    if (!empty($status_heading[$type])) {
      $output .= '<h2 class="visually-hidden">' . $status_heading[$type] . "</h2>\n";
    }

    if (count($messages) > 1) {
      foreach ($messages as $message) {
        $output .= '<p>' . $message . '</p>';
      }
    }
    else {
      $output .= $messages[0];
    }

    $output .= "</div>\n";
  }

  $output = array(
    '#markup' => $output,
    '#allowed_tags' => ['div', 'button', 'a', 'span', 'h2', 'p'],
  );
  $output = render($output);

  return $output;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function badcamp2017_theme_suggestions_bef_checkboxes_alter(&$suggestions, $vars){
  $suggestions[] = 'bef_checkboxes__' . str_ireplace('-', '_', $vars['element']['#name']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function badcamp2017_theme_suggestions_form_element_alter(&$suggestions, $vars){
  if(isset($vars['element']['#name']) && stripos($vars['element']['#name'], 'session-track') !== FALSE){
    $suggestions[] = 'form_element__session_track';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function badcamp2017_theme_suggestions_form_element_label_alter(&$suggestions, $vars){
  if(stripos($vars['element']['#id'], 'session-track') !== FALSE){
    $suggestions[] = 'form_element_label__session_track';
  }
}

/**
 * Implements hook_preprocess_node__type__view_mode().
 */
function badcamp2017_preprocess_node__blog__teaser(&$vars){
  unset($vars['content']['links']);
}